(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function () {
    'use strict';

    var Extendable = require('./extendable');

    module.exports = (function() {
        // Inherit from the Extendable class
        Extendable.extend(Component);

        // The entity that is assigned this component
        Component.prototype.entity = {};

        // The name to refer to this component
        Component.prototype.name = 'Component';
        Component.title = 'Component';

        function Component(entity) {
            this.entity = entity;
        }

        // Functions called when the entity receives the given event
        Component.prototype.respondEvents = {};

        return Component;

    })();
})();

},{"./extendable":15}],2:[function(require,module,exports){
/*
    Component: Bounded
    Prevents moving outside the canvas
*/
(function () {
    'use strict';

    var Component = require('../component');

    module.exports = (function() {
        // Inherit from the Component class
        Component.extend(Bounded);

        // The name to refer to this component
        Bounded.prototype.name = 'Bounded';
        Bounded.title = 'Bounded';

        // The location to be bounded within
        Bounded.prototype.x = null;
        Bounded.prototype.y = null;
        Bounded.prototype.width = null;
        Bounded.prototype.height = null;

        function Bounded(entity, x, y, width, height) {
            if (x !== null) {
                this.x = x;
            }
            if (y !== null) {
                this.y = y;
            }
            if (width !== null) {
                this.width = width;
            }
            if (height !== null) {
                this.height = height;
            }

            Bounded.__super__.constructor.call(this, entity);
        }

        Bounded.prototype.preRender = function(event, scene) {
            // If no args passed, bound inside whole canvas
            if (this.x === null) {
                this.x = 0;
            }
            if (this.y === null) {
                this.y = 0;
            }
            if (this.width === null) {
                this.width = scene.ctx.canvas.width;
            }
            if (this.height === null) {
                this.height = scene.ctx.canvas.height;
            }

            // North Edge
            if (this.entity.y < this.y) {
                this.entity.y = this.y;
            }

            // East Edge
            if (this.entity.x + this.entity.width > this.x + this.width) {
                this.entity.x = this.x + this.width - this.entity.width;
            }

            // South Edge
            if (this.entity.y + this.entity.height > this.y + this.height) {
                this.entity.y = this.height - this.y - this.entity.height;
            }

            // West Edge
            if (this.entity.x < this.x) {
                this.entity.x = this.x;
            }
        };

        return Bounded;

    })();
})();

},{"../component":1}],3:[function(require,module,exports){
/*
    Component: Collision
    Calls a callback when colliding with another entity
*/
(function () {
    'use strict';

    var Scene = require('../scene');
    var Component = require('../component');

    module.exports = (function() {
        // Inherit from the Component class
        Component.extend(Collision);

        // The name to refer to this component
        Collision.prototype.name = 'Collision';
        Collision.title = 'Collision';

        // The function to call if a collision was detected
        Collision.prototype.callback = null;

        // The event to listen to and check for a collision
        Collision.prototype.eventName = 'preRender';

        // The component on other entities that can be collided with
        // If none given, all can be collided with
        Collision.prototype.componentCollidable = null;

        function Collision(entity, componentCollidable, callback, eventName) {
            this.entity = entity;
            this.componentCollidable = componentCollidable;
            this.callback = callback;
            if (eventName !== null) {
                this.eventName = eventName;
            }

            Collision.__super__.constructor.call(this, entity);
        }

        Collision.prototype.preRender = function(event, scene) {
            if (this.eventName === event.type) {
                this.check(event, scene);
            }
        };

        Collision.prototype.mouseup = function(event, scene) {
            if (this.eventName === event.type) {
                this.check(event, scene);
            }
        };

        Collision.prototype.mousedown = function(event, scene) {
            if (this.eventName === event.type) {
                this.check(event, scene);
            }
        };

        Collision.prototype.mousemove = function(event, scene) {
            if (this.eventName === event.type) {
                this.check(event, scene);
            }
        };

        // Check for a collision and act
        Collision.prototype.check = function(event, scene) {
            // Can't collide with a hidden entity
            if (this.entity.display) {
                // Loop through all entities
                for (var i in scene.entities) {
                    var entity = scene.entities[i];

                    // Do we care if these entities overlap?
                    if ((this.entity !== entity) && entity.display && ((this.componentCollidable === null) || (this.componentCollidable in entity.components))) {
                        // Check if the entities overlap
                        if (Scene.isOverlap(this.entity, entity)) {
                            // Call the callback!
                            this.callback(event, scene, entity);
                        }
                    }
                }
            }
        };

        return Collision;

    })();
})();

},{"../component":1,"../scene":17}],4:[function(require,module,exports){
/*
    Component: DragCreate
    On drag, creates a new draggable entity and drags it
    Ala getting something from a toolbar
*/
(function () {
    'use strict';

    var Scene = require('../scene');
    var Component = require('../component');

    module.exports = (function() {
        // Inherit from the Component class
        Component.extend(DragCreate);

        // The name to refer to this component
        DragCreate.prototype.name = 'DragCreate';
        DragCreate.title = 'DragCreate';

        // An entity to be created on drag, bound to its arguments
        // So could be passed as this for example: Entity.bind(this, 0, 0)
        DragCreate.prototype.EntityDragBind = null;

        // The callback to be called when an entity is created
        // Receives parameters event, scene, and entity
        DragCreate.prototype.callback = null;

        function DragCreate(entity, EntityDragBind, callback) {
            this.EntityDragBind = EntityDragBind;
            if (typeof callback !== 'undefined') {
                this.callback = callback;
            }

            DragCreate.__super__.constructor.call(this, entity);
        }

        DragCreate.prototype.touchstart = function(event, scene) {
            // Call event.preventDefault to prevent touchcancel if necessary
            if (Scene.isInside(scene.getEventCoords(event), this.entity) && this.entity.display && !scene.dragging) {
                event.preventDefault();
            }

            this.drag(event, scene);
        };

        DragCreate.prototype.mousedown = function(event, scene) {
            this.drag(event, scene);
        };

        DragCreate.prototype.drag = function(event, scene) {
            // Can't dragcreate hidden entities
            if (this.entity.display && !scene.dragging) {
                var coords = scene.getEventCoords(event);

                // Check to see if the entity was clicked
                if (Scene.isInside(coords, this.entity)) {
                    // Create the new entity
                    var dragging = scene.entityAdd(new this.EntityDragBind());
                    dragging.x = this.entity.x;
                    dragging.y = this.entity.y;
                    dragging.components.Draggable.draggingX = coords.x - this.entity.x;
                    dragging.components.Draggable.draggingY = coords.y - this.entity.y;

                    // Call the callback if given
                    if (this.callback !== null) {
                        this.callback(event, scene, this.entity, dragging);
                    }
                }
            }
        };

        return DragCreate;

    })();
})();

},{"../component":1,"../scene":17}],5:[function(require,module,exports){
/*
    Component: Draggable
    Makes the entity draggable with the mouse
*/
(function () {
    'use strict';
 
    var Scene = require('../scene');
    var Component = require('../component');

    module.exports = (function() {
        // Inherit from the Component class
        Component.extend(Draggable);

        // The name to refer to this component
        Draggable.prototype.name = 'Draggable';
        Draggable.title = 'Draggable';

        Draggable.prototype.draggingX = null;
        Draggable.prototype.draggingY = null;

        function Draggable(entity) {
            Draggable.__super__.constructor.call(this, entity);
        }

        Draggable.prototype.mousedown = function(event, scene) {
            this.dragStart(event, scene);
        };

        Draggable.prototype.touchstart = function(event, scene) {
            // Call event.preventDefault to prevent touchcancel if necessary
            if (Scene.isInside(scene.getEventCoords(event), this.entity) && this.isDragging()) {
                event.preventDefault();
            }

            this.dragStart(event, scene);
        };

        Draggable.prototype.mousemove = function(event, scene) {
            this.dragMove(event, scene);
        };

        Draggable.prototype.touchmove = function(event, scene) {
            this.dragMove(event, scene);
        };

        Draggable.prototype.mouseup = function(event, scene) {
            this.dragEnd(event, scene);
        };

        Draggable.prototype.touchend = function(event, scene) {
            this.dragEnd(event, scene);
        };

        Draggable.prototype.dragStart = function(event, scene) {
            if (scene.dragging === false) {
                var coords = scene.getEventCoords(event);

                // Check to see if the entity was clicked, and start dragging it if so
                if (Scene.isInside(coords, this.entity)) {
                    scene.dragging = true;
                    this.draggingX = coords.x - this.entity.x;
                    this.draggingY = coords.y - this.entity.y;
                }
            }
        };

        Draggable.prototype.dragMove = function(event, scene) {
            // Drag if needed
            if (this.isDragging()) {
                var coords = scene.getEventCoords(event);
                this.entity.x = coords.x - this.draggingX;
                this.entity.y = coords.y - this.draggingY;
            }
        };

        Draggable.prototype.dragEnd = function(event, scene) {
            // Release a drag if needed
            if (this.isDragging()) {
                scene.dragging = false;
                var coords = scene.getEventCoords(event);
                this.entity.x = coords.x - this.draggingX;
                this.entity.y = coords.y - this.draggingY;
                this.draggingX = null;
                this.draggingY = null;
            }
        };

        // Returns true if currently being dragged, false otherwise
        Draggable.prototype.isDragging = function() {
            if ((this.draggingX !== null) && (this.draggingY !== null)) {
                return true;
            }
            else {
                return false;
            }
        };

        return Draggable;

    })();
})();

},{"../component":1,"../scene":17}],6:[function(require,module,exports){
/*
    Component: keyMove
    Makes the entity movable with the keyboard, ala the player character
*/
(function () {
    'use strict';

    var Scene = require('../scene');
    var Component = require('../component');

    module.exports = (function() {
        // Inherit from the Component class
        Component.extend(Obj);

        // The name to refer to this component
        Obj.prototype.name = 'KeyMove';
        Obj.title = 'KeyMove';

        // Default
        Obj.prototype.speed = 100; // pixels / second

        // Keep track of which keys are pressed
        Obj.prototype.up = false;
        Obj.prototype.down = false;
        Obj.prototype.left = false;
        Obj.prototype.right = false;

        function Obj(entity, speed) {
            Obj.__super__.constructor.call(this, entity);

            if (typeof speed !== 'undefined' && speed !== null) {
                this.speed = speed;
            }
        }

        Obj.prototype.keydown = function(event, scene) {
            this.setKey(event.which, true);
        };

        Obj.prototype.keyup = function(event, scene) {
            this.setKey(event.which, false);
        };

        Obj.prototype.preRender = function(event, scene) {
            if (this.up) {
                this.entity.y -= this.speed * event.dt;
            }
            if (this.down) {
                this.entity.y += this.speed * event.dt;
            }
            if (this.left) {
                this.entity.x -= this.speed * event.dt;
            }
            if (this.right) {
                this.entity.x += this.speed * event.dt;
            }
        };

        Obj.prototype.setKey = function(which, pressed) {
            // Up (up arrow, w)
            if (which === 38 || which === 87) {
                this.up = pressed;
            }
            // Down (down arrow, s)
            if (which === 40 || which === 83) {
                this.down = pressed;
            }
            // Left (left arrow, a)
            if (which === 37 || which === 65) {
                this.left = pressed;
            }
            // Right (right arrow, d)
            if (which === 39 || which === 68) {
                this.right = pressed;
            }
        };

        return Obj;

    })();
})();

},{"../component":1,"../scene":17}],7:[function(require,module,exports){
/*
    Component: Tween
    Allows moving animations
*/
(function () {
    'use strict';

    var Component = require('../component');

    module.exports = (function() {
        // Inherit from the Component class
        Component.extend(Tween);

        // The name to refer to this component
        Tween.prototype.name = 'Tween';
        Tween.title = 'Tween';

        // Parameters
        Tween.prototype.x = null;
        Tween.prototype.y = null;
        Tween.prototype.callback = null;

        Tween.prototype.x0 = null;
        Tween.prototype.y0 = null;

        Tween.prototype.time = 0;
        Tween.prototype.duration = null;

        Tween.prototype.mx = null;
        Tween.prototype.my = null;

        function Tween(entity, x, y, speed, callback) {
            this.x = x;
            this.y = y;

            if (typeof callback !== 'undefined') {
                this.callback = callback;
            }

            // Save the original position
            this.x0 = entity.x;
            this.y0 = entity.y;

            // Calculate the distance between the two points
            var d = Math.pow(Math.pow(y - entity.y, 2) + Math.pow(x - entity.x, 2), 1/2);

            // Calculate the time to reach this point
            if (speed !== null) {
                this.duration = d / speed;
            }

            // Calculate the time slopes in x and y direcitons
            this.mx = (x - entity.x) / this.duration;
            this.my = (y - entity.y) / this.duration;

            Tween.__super__.constructor.call(this, entity);
        }

        Tween.prototype.preRender = function(event, scene) {
            if (this.time !== null && this.time < this.duration) {
                this.time += event.dt;

                // If we're done
                if (this.time >= this.duration) {
                    // Set the entity at its final place and reset the time attributes
                    this.entity.x = this.x;
                    this.entity.y = this.y;
                    this.time = null;

                    // Call the callback if needed
                    if (this.callback !== null) {
                        this.callback(event, this.entity);
                    }
                }
                // Otherwise move it move it
                else {
                    this.entity.x = this.x0 + this.mx * this.time;
                    this.entity.y = this.y0 + this.my * this.time;
                }
            }
        };

        return Tween;

    })();
})();

},{"../component":1}],8:[function(require,module,exports){
(function () {
    'use strict';

    var Scene = require('./scene');

    module.exports = (function() {

        // DOM Objects
        Engine.prototype.canvas = null;
        Engine.prototype.ctx = null;

        // Scenes
        Engine.prototype.scenes = {};
        Engine.prototype.sceneActive = null;
        Engine.prototype.changeScenesCallback = null;
        Engine.prototype.sceneChanging = false;

        function Engine(canvas, changeScenesCallback) {
            // Save the changeScenes callback if given
            if (typeof changeScenesCallback !== 'undefined' && changeScenesCallback !== null) {
                this.changeScenesCallback = changeScenesCallback;
            }

            // Reset scenes
            Engine.prototype.scenes = {};

            // Save the canvas and context
            this.canvas = canvas;
            this.ctx = this.canvas.getContext('2d');

            // Add event listeners
            var me = this;
            this.canvas.addEventListener('mousedown', function(event) {
                me.getSceneActive().eventFire(event);
            });
            this.canvas.addEventListener('mousemove', function(event) {
                me.getSceneActive().eventFire(event);
            });
            this.canvas.addEventListener('mouseup', function(event) {
                me.getSceneActive().eventFire(event);
            });
            this.canvas.addEventListener('click', function(event) {
                me.getSceneActive().eventFire(event);
            });
            this.canvas.addEventListener('touchstart', function(event) {
                me.getSceneActive().eventFire(event);
            });
            this.canvas.addEventListener('touchmove', function(event) {
                me.getSceneActive().eventFire(event);
            });
            this.canvas.addEventListener('touchend', function(event) {
                me.getSceneActive().eventFire(event);
            });
            document.addEventListener('keyup', function(event) {
                me.getSceneActive().eventFire(event);
            });
            document.addEventListener('keydown', function(event) {
                me.getSceneActive().eventFire(event);
            });
        }

        // Call at each frame
        Engine.prototype.render = function(dt) {
            // Render the current scene
            this.getSceneActive().render(this.ctx, dt);
        };

        // Create a new scene
        Engine.prototype.sceneAdd = function(scene, name) {
            this.scenes[name] = scene;
            // tongue twister
            this.scenes[name].name = name;
        };

        // Destroy a scene
        Engine.prototype.sceneDestroy = function(name) {
            delete this.scenes[name];
        };

        // Gets the active scene
        Engine.prototype.getSceneActive = function() {
            return this.scenes[this.sceneActive];
        };

        // Changes to the new scene
        Engine.prototype.changeScenes = function(sceneName, SceneType, preserveSelf) {
            // Only change scenes if a valid sceneName was given
            if (sceneName !== null && sceneName !== this.sceneActive && !this.sceneChanging) {
                var sceneCurrent = this.sceneActive;

                // If the scene doesn't already exist and SceneType was given, create it
                if (!this.scenes.hasOwnProperty(sceneName) && SceneType !== null) {
                    this.sceneAdd(new SceneType(this), sceneName);
                }

                // If everything went well, change scenes
                if (this.scenes.hasOwnProperty(sceneName)) {
                    this.sceneChanging = true;

                    var me = this;
                    // Wait 50ms to avoid 'flash' between scenes
                    window.setTimeout(function() {
                        me.sceneActive = sceneName;

                        // Destroy the current scene unless preserveSelf
                        if ((preserveSelf === null || !preserveSelf) && sceneCurrent !== null) {
                            me.scenes[sceneCurrent].destroy();
                        }

                        // Call the callback if it was given
                        if (me.changeScenesCallback !== null) {
                            me.changeScenesCallback(me.getSceneActive());
                        }

                        me.sceneChanging = false;
                    }, 50);
                }
            }
        };

        return Engine;
    })();
})();

},{"./scene":17}],9:[function(require,module,exports){
/*
    Entity: Text: Button
    Creates a text object with an outline around it
*/
(function () {
    'use strict';

    var Scene = require('../scene');
    var Text = require('../entities/text');

    module.exports = (function() {
        Text.extend(Button);

        Button.prototype.callback = null;
        Button.prototype.scene = null;
        Button.prototype.height = null;
        Button.prototype.padding = 16;
        Button.prototype.strokeStyle = 'rgb(0, 0, 0)';

        function Button(x, y, width, height, text, font, fillStyle, callback, padding, strokeStyle) {
            Button.__super__.constructor.call(this, x, y, width, text, font, fillStyle);

            // Necessary to pass in parameters
            this.callback = callback;
            this.height = height;

            // Optional parameters
            if (typeof padding !== 'undefined') {
                this.padding = padding;
            }
            if (typeof strokeStyle !== 'undefined') {
                this.strokeStyle = strokeStyle;
            }
        }

        Button.prototype.render = function(ctx, dt) {
            // Draw the rectangle
            ctx.strokeStyle = this.strokeStyle;
            ctx.strokeRect(this.x, this.y, this.width, this.height);

            // Get the height of the font
            var fontSize = parseInt(this.font.substr(0, this.font.indexOf('px')));

            // Draw the text
            if (this.font !== null) {
                ctx.font = this.font;
            }
            ctx.fillStyle = this.fillStyle;
            ctx.fillText(this.text, this.x + this.padding, this.y + fontSize + this.padding, this.width - this.padding * 2);
        };

        // Button click event, has to check if click was inside the button!
        Button.prototype.click = function(event, scene) {
            if (Scene.isInside(scene.getEventCoords(event), this) && this.display) {
                this.callback(event);
            }
        };

        return Button;

    })();
})();

},{"../entities/text":11,"../scene":17}],10:[function(require,module,exports){
(function () {
    'use strict';

    var Entity = require('../entity');

    module.exports = (function() {
        Entity.extend(Sprite);

        Sprite.prototype.obj = null;

        // Sprite
        Sprite.prototype.spriteSheet = null;
        Sprite.prototype.spriteX = 0;
        Sprite.prototype.spriteY = 0;
        Sprite.prototype.spriteXDefault = 0;
        Sprite.prototype.spriteYDefault = 0;
        Sprite.prototype.loading = false;

        // Animation
        Sprite.prototype.spriteAnimations = {};
        Sprite.prototype.spriteAnimation = null;
        Sprite.prototype.spriteAnimationTime = null;
        Sprite.prototype.spriteAnimationCallback = null;

        function Sprite(x, y, width, height, spriteSheet, spriteX, spriteY, spriteWidth, spriteHeight) {
            Sprite.__super__.constructor.call(this, x, y, width, height);

            this.spriteSheet = spriteSheet;

            if (typeof spriteX === 'undefined' || spriteX === null) {
                this.spriteX = 0;
            }
            else {
                this.spriteX = spriteX;
            }
            if (typeof spriteY === 'undefined' || spriteY === null) {
                this.spriteY = 0;
            }
            else {
                this.spriteY = spriteY;
            }
            if (typeof spriteWidth === 'undefined' || spriteWidth === null) {
                this.spriteWidth = width;
            }
            else {
                this.spriteWidth = spriteWidth;
            }
            if (typeof spriteHeight === 'undefined' || spriteHeight === null) {
                this.spriteHeight = height;
            }
            else {
                this.spriteHeight = spriteHeight;
            }

            this.spriteXDefault = this.spriteX;
            this.spriteYDefault = this.spriteY;

            // Create the object
            this.obj = new Image();

            // Load it's resource
            var me = this;
            this.obj.addEventListener('load', function() {
                me.loading = false;
            }, false);
            this.obj.src = this.spriteSheet;
            this.loading = true;

            // Reset objects (for a deep copy)
            this.spriteAnimations = {};
        }

        // Draw the entity in the given context at the given coordinates
        Sprite.prototype.render = function(ctx, dt) {
            if (!this.loading) {
                // Handle sprite animations if needed for next frame
                if (this.spriteAnimation !== null) {
                    this.spriteAnimationTime += dt;
                    var animation = this.spriteAnimations[this.spriteAnimation];
                    var framesLength = animation.toX - animation.fromX + 1;

                    // If the animation has ended...
                    if (this.spriteAnimationTime > animation.period * framesLength) {
                        // If we have a set number of repetitions
                        if (this.spriteAnimationRepetitions > 0) {
                            this.spriteAnimationRepetitions--;
                            // If we've finished animating
                            if (this.spriteAnimationRepetitions === 0) {
                                // Call the callback if needed
                                if (this.spriteAnimationCallback !== null) {
                                    this.spriteAnimationCallback({type: 'spriteAnimationEnd'}, this);
                                }

                                // Reset parameters
                                this.spriteAnimation = null;
                                this.spriteAnimationTime = null;
                                this.spriteAnimationCallback = null;
                                this.spriteX = this.spriteXDefault;
                                this.spriteY = this.spriteYDefault;
                            }
                            // Otherwise reset the animation
                            else {
                                this.spriteAnimationTime = 0;
                            }
                        }
                        else {
                            this.spriteAnimationTime = 0;
                        }
                    }
                    // Otherwise make sure the current frame is correct
                    else {
                        var frame = Math.floor(this.spriteAnimationTime / animation.period);
                        this.spriteX = animation.fromX + frame;
                        this.spriteY = animation.fromY;
                    }
                }

                // Render the image on the scene
                if (this.display) {
                    var image = this.obj;
                    var sx = this.spriteX * this.spriteWidth;
                    var sy = this.spriteY * this.spriteHeight;
                    var sWidth = this.spriteWidth;
                    var sHeight = this.spriteHeight;
                    var dx = this.x;
                    var dy = this.y;
                    var dWidth = this.width;
                    var dHeight = this.height;
                    ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
                }
            }
        };

        // Define a new sprite animation with the given names and frames in the sprite sheet
        Sprite.prototype.spriteAnimationAdd = function(name, fromX, fromY, toX, period) {
            this.spriteAnimations[name] = {fromX: fromX, fromY: fromY, toX: toX, period: period};
        };

        // Run an animation
        Sprite.prototype.spriteAnimate = function(name, repetitions, callback) {
            if (typeof callback !== 'undefined') {
                this.spriteAnimationCallback = callback;
            }
            if (repetitions === null) {
                repetitions = -1;
            }
            this.spriteAnimationRepetitions = repetitions;
            this.spriteAnimation = name;
            this.spriteAnimationTime = 0;
        };

        // Stop the running animation
        Sprite.prototype.spriteAnimateStop = function() {
            this.spriteAnimation = null;
            this.spriteAnimationTime = null;
            this.spriteX = this.spriteXDefault;
            this.spriteY = this.spriteYDefault;
        };

        return Sprite;

    })();
})();

},{"../entity":14}],11:[function(require,module,exports){
/*
    Entity: Text
    Creates a text object
*/
(function () {
    'use strict';

    var Entity = require('../entity');

    module.exports = (function() {
        Entity.extend(Text);

        Text.prototype.text = '';
        Text.prototype.font = null;
        Text.prototype.fillStyle = 'rgb(0, 0, 0)';
        Text.prototype.textAlign = 'left';

        function Text(x, y, width, text, font, fillStyle, textAlign) {
            if (typeof text !== 'undefined') {
                this.text = text;
            }
            if (typeof font !== 'undefined') {
                this.font = font;
            }
            if (typeof fillStyle !== 'undefined') {
                this.fillStyle = fillStyle;
            }
            if (typeof textAlign !== 'undefined') {
                this.textAlign = textAlign;
            }
            Text.__super__.constructor.call(this, x, y, width, this.height || 0);
        }

        Text.prototype.render = function(ctx, dt) {
            if (this.font !== null) {
                ctx.font = this.font;
            }
            ctx.textAlign = this.textAlign;
            ctx.fillStyle = this.fillStyle;

            ctx.fillText(this.text, this.x, this.y, this.width);
        };

        return Text;

    })();
})();

},{"../entity":14}],12:[function(require,module,exports){
/*
    Entity: Text: TextInput
    Mimics an <input> in DOM
*/
(function () {
    'use strict';

    var Text = require('./text');
    var Scene = require('../scene');

    module.exports = (function() {
        Text.extend(TextInput);

        TextInput.prototype.height = 0;
        TextInput.prototype.font = null;
        TextInput.prototype.fillStyleInput = 'rgb(255, 255, 255)';
        TextInput.prototype.strokeStyle = 'rgb(255, 255, 255)';
        TextInput.prototype.padding = 8;

        // Hidden DOM input
        TextInput.prototype.input = null;
        TextInput.prototype.cursor = null;
        TextInput.prototype.focus = false;
        TextInput.prototype.type = 'text';

        function TextInput(x, y, width, height, text, font, fillStyle, textAlign, strokeStyle, padding, fillStyleInput, type) {
            if (height) {
                this.height = height;
            }
            if (!font) {
                font = this.font;
            }
            if (!fillStyle) {
                fillStyle = this.fillStyle;
            }
            if (strokeStyle) {
                this.strokeStyle = strokeStyle;
            }
            if (padding) {
                this.padding = padding;
            }
            if (fillStyleInput) {
                this.fillStyleInput = fillStyleInput;
            }
            if (type) {
                this.type = type;
            }

            TextInput.__super__.constructor.call(this, x, y, width, text, font, fillStyle, textAlign);

            // Create the hidden input
            this.input = document.createElement('input');
            this.input.type = this.type;
            this.input.style.opacity = 1;
            this.input.style.position = 'absolute';
            this.input.style.top = '-10000px';
            this.input.style['z-index'] = -1;
            document.body.appendChild(this.input);

            // Create an event to pull text from hidden input
            var me = this;
            this.input.addEventListener('keyup', function(event) {
                me.text = me.input.value;
            });
        }

        TextInput.prototype.render = function(ctx, dt) {
            // Get the height of the font
            var fontSize = parseInt(this.font.substr(0, this.font.indexOf('px')));

            // Draw the rectangle
            ctx.fillStyle = this.fillStyleInput;
            ctx.fillRect(this.x, this.y, this.width, this.height);
            ctx.strokeStyle = this.strokeStyle;
            ctx.strokeRect(this.x, this.y, this.width, this.height);

            // Draw the text
            if (this.font !== null) {
                ctx.font = this.font;
            }
            ctx.textAlign = this.textAlign;
            ctx.fillStyle = this.fillStyle;
            ctx.fillText(this.text, this.x + this.padding, this.y + fontSize + this.padding, this.width - this.padding * 2);

            // Create the cursor
            if (this.focus) {
                ctx.fillRect(this.x + 4, this.y + 2, 2, this.height - 4); 
            }
        };

        // Input click event, handle focus
        TextInput.prototype.click = function(event, scene) {
            // If the click was in the element
            if (Scene.isInside(scene.getEventCoords(event), this) && this.display) {
                // Set the focus on the hidden input
                this.input.focus();
                this.focus = true;
            }
            // Otherwise, remove the visual focus element
            else {
                this.focus = false;
            }
        };

        return TextInput;

    })();
})();

},{"../scene":17,"./text":11}],13:[function(require,module,exports){
/*
    Entity: TextMultiline
    Creates a text object
*/
(function () {
    'use strict';

    var Text = require('./text');

    module.exports = (function() {
        Text.extend(TextMultiline);

        TextMultiline.prototype.charsPerLine = 80;
        TextMultiline.prototype.lineHeight = 30;

        // The text split into lines
        TextMultiline.prototype.textArray = [];

        function TextMultiline(x, y, width, text, font, fillStyle, charsPerLine, lineHeight) {
            // Reset textArray for a deep copy
            this.textArray = [];

            TextMultiline.__super__.constructor.call(this, x, y, width, text, font, fillStyle);

            if (typeof charsPerLine !== 'undefined') {
                this.charsPerLine = charsPerLine;
            }
            if (typeof lineHeight !== 'undefined') {
                this.lineHeight = lineHeight;
            }

            // Create the text array
            var textWords = this.text.split(' ');
            var line = 0;
            while (textWords.length) {
                this.textArray[line] = textWords.shift();
                while (this.textArray[line] && (typeof textWords[0] !== 'undefined') && (this.textArray[line] + textWords[0]).length < this.charsPerLine) {
                    this.textArray[line] += ' ' + textWords.shift();
                }
                line++;
            }
        }

        TextMultiline.prototype.render = function(ctx, dt) {
            if (this.font !== null) {
                ctx.font = this.font;
            }
            ctx.fillStyle = this.fillStyle;

            for (var i = 0; i < this.textArray.length; i++) {
                ctx.fillText(this.textArray[i], this.x, this.y + i * this.lineHeight, this.width);
            }
        };

        return TextMultiline;

    })();
})();

},{"./text":11}],14:[function(require,module,exports){
(function () {
    'use strict';

    var Extendable = require('./extendable');

    module.exports = (function() {
        // Inherit from the Extendable class
        Extendable.extend(Entity);

        // Canvas Rendering
        Entity.prototype.display = true;
        Entity.prototype.x = 0;
        Entity.prototype.y = 0;
        Entity.prototype.width = 0;
        Entity.prototype.height = 0;
        Entity.prototype.color = 'rgb(0, 0, 0)';

        // Components
        Entity.prototype.components = {};

        function Entity(x, y, width, height, color) {
            // Set passed in args
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            if (color !== null) {
                this.color = color;
            }

            // Reset objects (for a deep copy)
            this.components = {};
        }

        // Draw the entity in the given context at the given coordinates
        Entity.prototype.render = function(ctx, dt) {
            ctx.fillStyle = this.color;
            ctx.fillRect(this.x, this.y, this.width, this.height);
        };

        // Add a component
        Entity.prototype.componentAdd = function(component) {
            this.components[component.name] = component;
        };

        // Remove a component
        Entity.prototype.componentRemove = function(Component) {
            delete this.components[Component.title];
        };

        return Entity;

    })();
})();

},{"./extendable":15}],15:[function(require,module,exports){
(function () {
    'use strict';

    module.exports = (function() {

        function Extendable() {
        }

        // Extend the given child as a subclass of the parent class
        Extendable.extend = function(child) {
            for (var key in this) {
                if (!child.prototype.hasOwnProperty(key)) {
                    child[key] = this[key];
                }
            }

            function Ctor() {
                this.constructor = child;
            }
            Ctor.prototype = this.prototype;
            child.prototype = new Ctor();

            child.__super__ = this.prototype;
        };

        return Extendable;

    })();
})();

},{}],16:[function(require,module,exports){
(function() {
    'use strict';

    var Engine = require('./engine');
    var Entity = require('./entity');
    var Extendable = require('./extendable');
    var Component = require('./component');
    var Scene = require('./scene');
    var Loading = require('./scenes/loading');
    var Sprite = require('./entities/sprite');
    var Text = require('./entities/text');
    var TextMultiline = require('./entities/textMultiline');
    var TextInput = require('./entities/textInput');
    var Button = require('./entities/button');
    var Tween = require('./components/tween');
    var Draggable = require('./components/draggable');
    var DragCreate = require('./components/dragCreate');
    var KeyMove = require('./components/keyMove');
    var Bounded = require('./components/bounded');
    var Collision = require('./components/collision');

    // Create the global hoopty object
    window.hoopty = {
        Engine: Engine,
        Extendable: Extendable,
        entities: {
            Entity: Entity,
            Sprite: Sprite,
            Text: Text,
            TextMultiline: TextMultiline,
            TextInput: TextInput,
            Button: Button,
        },
        components: {
            Component: Component,
            Bounded: Bounded,
            Collision: Collision,
            Draggable: Draggable,
            DragCreate: DragCreate,
            KeyMove: KeyMove,
            Tween: Tween,
        },
        scenes: {
            Scene: Scene,
            Loading: Loading,
        }
    };
})();

},{"./component":1,"./components/bounded":2,"./components/collision":3,"./components/dragCreate":4,"./components/draggable":5,"./components/keyMove":6,"./components/tween":7,"./engine":8,"./entities/button":9,"./entities/sprite":10,"./entities/text":11,"./entities/textInput":12,"./entities/textMultiline":13,"./entity":14,"./extendable":15,"./scene":17,"./scenes/loading":18}],17:[function(require,module,exports){
(function () {
    'use strict';

    var Extendable = require('./extendable');

    module.exports = (function() {
        // Inherit from the Extendable class
        Extendable.extend(Scene);

        Scene.prototype.route = '/';

        Scene.prototype.entities = [];

        Scene.prototype.engine = null;

        // Used by the draggable component to limit dragging to 1 entity at a time
        Scene.prototype.dragging = false;

        function Scene(engine) {
            this.engine = engine;

            // Reset the entities object
            this.entities = [];
        }

        // Draw the entity in the given context at the given coordinates
        Scene.prototype.render = function(ctx, dt) {
            // Update the ctx
            this.ctx = ctx;

            // Render entities
            var me = this;
            this.entities.forEach(function(elt) {
                if (elt.display) {
                    me.eventFire({type: 'preRender', dt: dt});
                    elt.render(ctx, dt);
                }
            });
        };

        // Create an entity
        Scene.prototype.entityAdd = function(entity) {
            this.entities.push(entity);
            return this.entities[this.entities.length - 1];
        };

        // Remove an entity.  Returns true if found, false if not found
        Scene.prototype.entityRemove = function(entity) {
            for (var i in this.entities) {
                var entityCheck = this.entities[i];
                if (entityCheck === entity) {
                    this.entities.splice(i, 1);
                    return true;
                }
            }

            return false;
        };

        // Call the given event responder on all entity components listening
        Scene.prototype.eventFire = function(event) {
            // Fire on the scene
            if (event.type in this) {
                this[event.type](event);
            }

            // Loop through in reverse order, to fire on recent, top entities first
            for (var i = this.entities.length - 1; i >= 0; i--) {
                // Fire on all entities
                var entity = this.entities[i];
                if (event.type in entity) {
                    entity[event.type](event, this);
                }
                for (var j in entity.components) {
                    // Fire on all components on the given entity
                    var component = entity.components[j];
                    if (event.type in component) {
                        component[event.type](event, this);
                    }
                }
            }
        };

        // Gets the coordinates of an event on the canvas relative to the canvas
        Scene.prototype.getEventCoords = function(event) {
            // Only if we have ctx (have rendered)
            if ('ctx' in this) {
                var totalOffsetX = 0;
                var totalOffsetY = 0;
                var canvasX = 0;
                var canvasY = 0;
                var currentElement = this.ctx.canvas;

                // Get the direct event x/y
                var eventX = 0;
                var eventY = 0;
                if (event.type === 'touchstart' || event.type === 'touchmove' || event.type === 'touchend' || event.type === 'touchcancel') {
                    var eventOriginal = event.touches[0] || event.changedTouches[0];
                    eventX = eventOriginal.pageX;
                    eventY = eventOriginal.pageY;
                }
                else {
                    eventX = event.pageX;
                    eventY = event.pageY;
                }

                // Get the coords with respect to the canvas
                do {
                    totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
                    totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
                }
                while(currentElement = currentElement.offsetParent);

                canvasX = eventX - totalOffsetX;
                canvasY = eventY - totalOffsetY;

                // Scale the coords if the canvas is scaled
                var scale = this.ctx.canvas.width / this.ctx.canvas.style.width.substr(0, this.ctx.canvas.style.width.length - 2);
                canvasX *= scale;
                canvasY *= scale;

                return {x:canvasX, y:canvasY};
            }
            else {
                return {x: 0, y: 0};
            }
        };

        // Returns true if the coords are inside the object, false otherwise
        Scene.isInside = function(coords, entity) {
            if ((coords.x >= entity.x) && (coords.x <= entity.x + entity.width)) {
                if ((coords.y >= entity.y) && (coords.y <= entity.y + entity.height)) {
                    return true;
                }
            }
            return false;
        };

        // Returns true if the two entities overlap
        Scene.isOverlap = function(entity1, entity2) {
            var rect1X1 = entity1.x;
            var rect1X2 = entity1.x + entity1.width;
            var rect1Y1 = entity1.y;
            var rect1Y2 = entity1.y + entity1.height;
            var rect2X1 = entity2.x;
            var rect2X2 = entity2.x + entity2.width;
            var rect2Y1 = entity2.y;
            var rect2Y2 = entity2.y + entity2.height;

            if (rect1X1 < rect2X2 && rect1X2 > rect2X1 && rect1Y1 < rect2Y2 && rect1Y2 > rect2Y1) {
                return true;
            }
            return false;
        };

        // Returns an object with x and y set to the midpoint of the two entities
        Scene.getMidpoint = function(entity1, entity2) {
            var coords = {x: 0, y: 0};

            coords.x = Math.round((entity1.x + entity2.x) / 2);
            coords.y = Math.round((entity1.y + entity2.y) / 2);

            return coords;
        };

        // Reset the current scene
        Scene.prototype.reset = function() {
            this.engine.scenes[this.name] = new Scene(this.engine);
            this.engine.changeScenes(this.name);
        };

        // Destroy this scene by removing its refrence in engine
        Scene.prototype.destroy = function() {
            this.engine.sceneDestroy(this.name);
        };

        return Scene;

    })();
})();

},{"./extendable":15}],18:[function(require,module,exports){
/*
    Scene: Loading
    The initial loading screen
*/
(function () {
    'use strict';

    var Scene = require('../scene');
    var Text = require('../entities/text');

    module.exports = (function() {
        Scene.extend(Loading);

        Loading.prototype.name = 'Loading';

        // The scene to change to when loading is done
        Loading.prototype.sceneNameChangeTo = 'Start';

        Loading.prototype.urlCount = 0;
        Loading.prototype.urlsDone = 0;

        function Loading(engine, urls, sceneNameChangeTo) {
            if (sceneNameChangeTo) {
                this.sceneNameChangeTo = sceneNameChangeTo;
            }

            Loading.__super__.constructor.call(this, engine);

            // Get the url count
            if (!urls) {
                urls = [];
            }
            this.urlCount = urls.length;

            // Create the title
            this.entityAdd(new Text(this.engine.ctx.canvas.width / 4, 260, 0, 'Loading...', '50px \'Press Start 2P\'', 'rgb(0, 0, 0)'));

            // Load each url
            var me = this;
            urls.forEach(function(url) {
                var image = new Image();
                image.addEventListener('load', function() {
                    me.urlsDone++;
                }, false);
                image.src = url;
            });
        }

        Loading.prototype.render = function(ctx, dt) {
            // Go to next scene if all loaded
            if (this.urlsDone >= this.urlCount) {
                this.engine.changeScenes(this.sceneNameChangeTo);
            }

            // Set the background
            ctx.fillStyle = 'rgb(255, 255, 255)';
            ctx.fillRect (0, 0, ctx.canvas.width, ctx.canvas.height);

            Loading.__super__.render.call(this, ctx, dt);
        };

        return Loading;

    })();
})();

},{"../entities/text":11,"../scene":17}]},{},[16])
//# sourceMappingURL=data:application/json;base64,
